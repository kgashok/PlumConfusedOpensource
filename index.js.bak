import express from 'express';
import got from 'got';
import crypto from 'crypto';
import OAuth from 'oauth-1.0a';
import qs from 'querystring';

const app = express();
app.use(express.json());
app.use(express.static('public'));

const consumer_key = process.env.CONSUMER_KEY;
const consumer_secret = process.env.CONSUMER_SECRET;
const callback_url = process.env.CALLBACK_URL || 'http://localhost:3000/callback'; // Your callback URL

const requestTokenURL = 'https://api.twitter.com/oauth/request_token';
const authorizeURL = new URL('https://api.twitter.com/oauth/authorize');
const accessTokenURL = 'https://api.twitter.com/oauth/access_token';
const endpointURL = 'https://api.twitter.com/2/tweets';

const oauth = OAuth({
    consumer: { key: consumer_key, secret: consumer_secret },
    signature_method: 'HMAC-SHA1',
    hash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')
});

// Store for temporary OAuth tokens
const sessions = new Map();

async function requestToken() {
    const authHeader = oauth.toHeader(oauth.authorize({
        url: requestTokenURL,
        method: 'POST'
    }));

    const req = await got.post(requestTokenURL, {
        headers: { 
            Authorization: authHeader["Authorization"]
        },
        searchParams: {
            oauth_callback: callback_url
        },
        throwHttpErrors: false
    });

    if (req.body) {
        return qs.parse(req.body);
    } else {
        throw new Error('Cannot get OAuth request token');
    }
}

async function accessToken(oauth_token, oauth_token_secret, oauth_verifier) {
    const authHeader = oauth.toHeader(oauth.authorize({
        url: accessTokenURL,
        method: 'POST'
    }));

    const req = await got.post(accessTokenURL, {
        headers: { Authorization: authHeader["Authorization"] },
        searchParams: {
            oauth_token,
            oauth_verifier
        },
        throwHttpErrors: false
    });

    if (req.body) {
        return qs.parse(req.body);
    } else {
        throw new Error('Cannot get OAuth access token');
    }
}

async function postTweet(oauth_token, oauth_token_secret, tweetText) {
    const token = {
        key: oauth_token,
        secret: oauth_token_secret
    };

    const authHeader = oauth.toHeader(oauth.authorize({
        url: endpointURL,
        method: 'POST'
    }, token));

    const req = await got.post(endpointURL, {
        json: { text: tweetText },
        responseType: 'json',
        headers: {
            Authorization: authHeader["Authorization"],
            'user-agent': "v2CreateTweetJS",
            'content-type': "application/json",
            'accept': "application/json"
        },
        throwHttpErrors: false
    });
    return req.body;
}

// Start the OAuth flow
app.get('/auth/twitter', async (req, res) => {
    try {
        const oAuthRequestToken = await requestToken();

        // Store the token secret for later use
        sessions.set(oAuthRequestToken.oauth_token, oAuthRequestToken.oauth_token_secret);

        // Redirect user to Twitter authorization page
        authorizeURL.searchParams.set('oauth_token', oAuthRequestToken.oauth_token);
        res.redirect(authorizeURL.href);
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});

// Handle the callback from Twitter
app.get('/callback', async (req, res) => {
    try {
        const { oauth_token, oauth_verifier } = req.query;
        const oauth_token_secret = sessions.get(oauth_token);

        if (!oauth_token_secret) {
            throw new Error('OAuth token not found in session');
        }

        // Exchange the request token for an access token
        const oAuthAccessToken = await accessToken(
            oauth_token,
            oauth_token_secret,
            oauth_verifier
        );

        // Store the access tokens (in a real application, you'd want to store these securely)
        // You might want to store these in a database or secure session
        sessions.set('access_token', {
            token: oAuthAccessToken.oauth_token,
            token_secret: oAuthAccessToken.oauth_token_secret
        });

        // Clean up the temporary token
        sessions.delete(oauth_token);

        res.send('Authentication successful! You can now post tweets.');
    } catch (e) {
        res.status(500).json({ error: e.message });
    }
});

// Endpoint to post tweets using stored access tokens
app.post('/tweet', async (req, res) => {
    try {
        const { text } = req.body;
        const accessTokens = sessions.get('access_token');

        if (!accessTokens) {
            return res.status(401).json({ error: 'Not authenticated. Please authorize first.' });
        }

        const response = await postTweet(
            accessTokens.token,
            accessTokens.token_secret,
            text
        );

        res.json({ success: true, response });
    } catch (e) {
        res.status(500).json({ success: false, error: e.message });
    }
});

app.listen(3000, '0.0.0.0', () => {
    console.log('Server running on port 3000');
    console.log('Visit http://localhost:3000/auth/twitter to authenticate');
});